# Example configuration file for Munin, generated by 'make build'

# The next three variables specifies where the location of the RRD
# databases, the HTML output, logs and the lock/pid files.  They all
# must be writable by the user running munin-cron.  They are all
# defaulted to the values you see here.
#
dbdir	<%=node['munin']['master']['dbdir']%>
htmldir	<%=node['munin']['master']['htmldir']%>
logdir	<%=node['munin']['logdir']%>
rundir	<%=node['munin']['rundir']%>

# Where to look for the HTML templates
#
tmpldir	<%=node['munin']['master']['tmpldir']%>

# Where to look for the static www files
#
staticdir	<%=node['munin']['master']['staticdir']%>

# temporary cgi files are here. note that it has to be writable by 
# the cgi user (usually nobody or httpd).
#
cgitmpdir	<%=node['munin']['master']['cgitmpdir']%>

# (Exactly one) directory to include all files from.
includedir /etc/munin/munin-conf.d

# You can choose the time reference for "DERIVE" like graphs, and show
# "per minute", "per hour" values instead of the default "per second"
#
graph_period <%=node['munin']['master']['graph_period']%>

# Graphics files are generated either via cron or by a CGI process.
# See http://munin-monitoring.org/wiki/CgiHowto2 for more
# documentation.
# Since 2.0, munin-graph has been rewritten to use the cgi code. 
# It is single threaded *by design* now.
#
graph_strategy <%=node['munin']['master']['graph_strategy'] %>

# munin-cgi-graph is invoked by the web server up to very many times at the
# same time.  This is not optimal since it results in high CPU and memory
# consumption to the degree that the system can thrash.  Again the default is
# 6.  Most likely the optimal number for max_cgi_graph_jobs is the same as
# max_graph_jobs.
#
munin_cgi_graph_jobs <%= node['munin']['master']['munin_cgi_graph_jobs'] %>

# If the automatic CGI url is wrong for your system override it here:
#
cgiurl_graph /munin/cgi/munin-cgi-graph

# max_size_x and max_size_y are the max size of images in pixel.
# Default is 4000. Do not make it too large otherwise RRD might use all
# RAM to generate the images.
# 
#max_size_x 4000
#max_size_y 4000

# HTML files are normally generated by munin-html, no matter if the
# files are used or not. You can change this to on-demand generation
# by following the instructions in http://munin-monitoring.org/wiki/CgiHowto2
# 
# Notes: 
# - moving to CGI for HTML means you cannot have graph generated by cron.
# - cgi html has some bugs, mostly you still have to launch munin-html by hand
# 
# html_strategy <%= node['munin']['master']['html_strategy'] %>

# munin-update runs in parallel.
#
# The default max number of processes is 16, and is probably ok for you.
#
# If set too high, it might hit some process/ram/filedesc limits.
# If set too low, munin-update might take more than 5 min.
#
# If you want munin-update to not be parallel set it to 0.
#
max_processes <%= node['munin']['master']['max_processes'] %>

# RRD updates are per default, performed directly on the rrd files.
# To reduce IO and enable the use of the rrdcached, uncomment it and set it to
# the location of the socket that rrdcached uses.
#
rrdcached_socket <%= node['munin']['rundir']%>/rrdcached.sock

# Drop somejuser@fnord.comm and anotheruser@blibb.comm an email everytime
# something changes (OK -> WARNING, CRITICAL -> OK, etc)
<% unless node['munin']['master']['contact_list'].empty? %>
	<% node['munin']['master']['contact_list'].each do |name, contact| %>
		contact.<%= name %>.command mail -s "Munin Notification" <%= contact %>
	<% end %>
<% end %>
#contact.someuser.command mail -s "Munin notification" somejuser@fnord.comm
#contact.anotheruser.command mail -s "Munin notification" anotheruser@blibb.comm
#
# For those with Nagios, the following might come in handy. In addition,
# the services must be defined in the Nagios server as well.
#contact.nagios.command /usr/bin/send_nsca nagios.host.comm -c /etc/nsca.conf

# a simple host tree
<% @monitored_nodes.each do |server| %>
[<%= server['hostname'] %>]
    address <%= server['ipaddress'] %>
    use_node_name yes
<% end %>

